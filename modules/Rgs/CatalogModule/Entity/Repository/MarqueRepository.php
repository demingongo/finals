<?php

namespace Rgs\CatalogModule\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Rgs\CatalogModule\Entity\Marque;

/**
 * MarqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarqueRepository extends EntityRepository
{
	public function publish(array $ids, $publish = Marque::PUBLISHED){
		foreach($ids as $id){
			$this->publishOneMarque($id, $publish);
		}
	}

	public function publishOneMarque($id, $publish = Marque::PUBLISHED){
		$qb = $this->createQueryBuilder('m');

		return $qb->update('RgsCatalogModule:Marque', 'm')
			->set('m.published', ':published')
			->where('m.id = :id')
			->setParameter('published', $publish)
			->setParameter('id', $id)
			->getQuery()
			->execute();
	}

	public function deleteOneById($id)
	{
		$qb = $this->createQueryBuilder('m');

		return $qb->delete('RgsCatalogModule:Marque', 'm')
			->where('m.id = :id')
			->setParameter('id', $id)
			->getQuery()
			->execute();
	}

	public function deleteByIds(array $ids)
	{
		foreach($ids as $id){
			$this->deleteOneById($nsmc, $ids);
		}
	}

	public function getMarques($limit = 20, $page = 1, $orderBy = 'm.name', $ascending = 'ASC')
	{
		$qb = $this->createQueryBuilder('m');
		
		$qb	->orderBy($orderBy, $ascending)
			->setFirstResult(($page-1) * $limit)
			->setMaxResults($limit);

		return new Paginator($qb);
	}
	
	public function findMarques($limit = 20, $page = 1, $where = array(), $orderBy = array())
	{
		$qb = $this->createQueryBuilder('m');
		
		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		if(empty($orderBy))
			$orderBy = array('m.name' => 'ASC');

		foreach($orderBy as $k => $v){
			$qb	->addOrderBy($k, $v);
		}
		
		$qb ->setFirstResult(($page-1) * $limit)
			->setMaxResults($limit);

		return new Paginator($qb);
	}

	public function countMarques($where = array())
	{
		$qb = $this->createQueryBuilder('m');

		$qb->select('count(m.id)');

		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findItems($limit = 20, $page = 1, $where = array(), $orderBy = array())
	{
		return $this->findMarques($limit, $page, $where, $orderBy);
	}

	public function countItems($where = array())
	{
		return $this->countMarques($where);
	}
}
