<?php

namespace Rgs\CatalogModule\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Rgs\CatalogModule\Entity\Etat;

/**
 * EtatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtatRepository extends EntityRepository
{
	public function publish(array $ids, $publish = Etat::PUBLISHED){
		foreach($ids as $id){
			$this->publishOneEtat($id, $publish);
		}
	}

	public function publishOneEtat($id, $publish = Etat::PUBLISHED){
		$qb = $this->createQueryBuilder('e');

		return $qb->update('RgsCatalogModule:Etat', 'e')
			->set('e.published', ':published')
			->where('e.id = :id')
			->setParameter('published', $publish)
			->setParameter('id', $id)
			->getQuery()
			->execute();
	}

	public function deleteOneById($id)
	{
		$qb = $this->createQueryBuilder('e');

		return $qb->delete('RgsCatalogModule:Etat', 'e')
			->where('e.id = :id')
			->setParameter('id', $id)
			->getQuery()
			->execute();
	}

	public function deleteByIds(array $ids)
	{
		foreach($ids as $id){
			$this->deleteOneById($ids);
		}
	}

	public function getEtats($limit = 20, $page = 1, $orderBy = 'e.name', $ascending = 'ASC')
	{
		$qb = $this->createQueryBuilder('e');
		
		$qb	->orderBy($orderBy, $ascending)
			->setFirstResult(($page-1) * $limit)
			->setMaxResults($limit);

		return new Paginator($qb);
	}
	
	
	public function findEtats($limit = 20, $page = 1, $where = array(), $orderBy = array())
	{
		$qb = $this->createQueryBuilder('e');
		
		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		if(empty($orderBy))
			$orderBy = array('e.name' => 'ASC');

		foreach($orderBy as $k => $v){
			$qb	->addOrderBy($k, $v);
		}
		
		$qb ->setFirstResult(($page-1) * $limit)
			->setMaxResults($limit);

		return new Paginator($qb);
	}

	public function countEtats($where = array())
	{
		$qb = $this->createQueryBuilder('e');

		$qb->select('count(e.id)');

		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findItems($limit = 20, $page = 1, $where = array(), $orderBy = array())
	{
		return $this->findEtats($limit, $page, $where, $orderBy);
	}

	public function countItems($where = array())
	{
		return $this->countEtats($where);
	}
}
