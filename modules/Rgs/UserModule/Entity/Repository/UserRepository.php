<?php

namespace Rgs\UserModule\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Rgs\UserModule\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	public function lock(array $ids, $locked = User::LOCKED){
		foreach($ids as $id){
			$this->lockOneUser($id, $locked);
		}
	}

	public function lockOneUser($id, $locked = User::LOCKED){
		$qb = $this->createQueryBuilder('u');

		return $qb->update('UserModule:User', 'u')
			->set('u.locked', ':locked')
			->where('u.id = :id')
			->setParameter('locked', $locked)
			->setParameter('id', $id)
			->getQuery()
			->execute();
	}

	public function activate(array $ids, $activated = User::ACTIVATED){
		foreach($ids as $id){
			$this->activateOneUser($id, $activated);
		}
	}

	public function activateOneUser($id, $activated = User::ACTIVATED){
		$qb = $this->createQueryBuilder('u');

		return $qb->update('UserModule:User', 'u')
			->set('u.activated', ':activated')
			->where('u.id = :id')
			->setParameter('activated', $activated)
			->setParameter('id', $id)
			->getQuery()
			->execute();
	}

	public function deleteOneById($id)
	{
		$qb = $this->createQueryBuilder('u');

		return $qb->delete('UserModule:User', 'u')
			->where('u.id = :id')
			->setParameter('id', $id)
			->getQuery()
			->execute();
	}

	public function deleteByIds(array $ids)
	{
		foreach($ids as $id){
			$this->deleteOneById($ids);
		}
	}

	public function findUsers($limit = 20, $page = 1, $where = array(), $orderBy = array())
	{
		$qb = $this->createQueryBuilder('u');

		$qb->join ('u.group ','g');
		
		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		if(empty($orderBy))
			$orderBy = array('u.id' => 'DESC');

		foreach($orderBy as $k => $v){
			$qb	->addOrderBy($k, $v);
		}
		
		$qb ->setFirstResult(($page-1) * $limit)
			->setMaxResults($limit);

		return new Paginator($qb);
	}

	public function getFindUsersQB($limit = 20, $page = 1, $where = array(), $orderBy = array())
	{
		$qb = $this->createQueryBuilder('u');

		$qb->join ('u.group ','g');
		
		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		if(empty($orderBy))
			$orderBy = array('u.id' => 'DESC');

		foreach($orderBy as $k => $v){
			$qb	->addOrderBy($k, $v);
		}
		
		return $qb ->setFirstResult(($page-1) * $limit)
			->setMaxResults($limit);
	}

	public function countUsers($where = array())
	{
		$qb = $this->createQueryBuilder('u');

		$qb->join ('u.group ','g');

		$qb->select('count(u.id)');

		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getCountUsersQB($where = array())
	{
		$qb = $this->createQueryBuilder('u');

		$qb->join ('u.group ','g');

		$qb->select('count(u.id)');

		$i = 1;
		foreach($where as $k => $v){
			$qb->andWhere($qb->expr()->eq($k, '?'.$i))
				->setParameter($i, $v);
			$i++;
		}

		return $qb;
	}
}
